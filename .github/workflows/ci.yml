name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2 # Fail cache download after 2 minutes.

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc
        run: sudo apt-get install protobuf-compiler

      - uses: actions/checkout@v3

      - uses: r7kamura/rust-problem-matchers@d58b70c4a13c4866d96436315da451d8106f8f08 #v1.3.0

      - run: rustup toolchain install stable

      - run: wget -q -O- https://github.com/obi1kenobi/cargo-semver-checks/releases/download/v0.19.0/cargo-semver-checks-x86_64-unknown-linux-gnu.tar.gz | tar -xz -C ~/.cargo/bin
        shell: bash

      - id: test
        uses: ./.github/actions/multiple-rust-crates
        env:
          CARGO_TERM_VERBOSE: true
        with:
          run: |
            rustup toolchain install $version

            rustup default $version
            cargo +$version build --package $crate --all-features

            rustup default stable
            cargo test --package $crate --all-features
            cargo build --package $crate --no-default-features

            cargo clean

            code=$(curl https://crates.io/api/v1/crates/$crate --silent --write-out "%{http_code}" --output /dev/null)
            if [ $code -eq 200 ]; then
              cargo semver-checks check-release --package $crate --verbose
            fi

            cargo metadata --format-version=1 --no-deps | \
              jq -e -r '.packages[] | select(.name == "$crate") | .dependencies | all(.name != "libp2p")'

  feature_matrix: # Test various feature combinations work correctly
    name: Compile with select features
    runs-on: ubuntu-latest
    env:
      FEATURES: '["mdns tcp dns tokio", "mdns tcp dns async-std"]'
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable

      - uses: r7kamura/rust-problem-matchers@d58b70c4a13c4866d96436315da451d8106f8f08 #v1.3.0

      - run: |
          status=0
          while read -r features; do
            echo "::group::$features"
            cargo check --package libp2p --features="$features" || status=1
            echo "::endgroup::"
          done <<< $(jq -r '.[]' <<< "$FEATURES")
          exit $status

  clippy:
    runs-on: ubuntu-latest
    env:
      TOOLCHAINS: '["1.68.0","beta"]'
    steps:
      - uses: actions/checkout@v3

      - uses: r7kamura/rust-problem-matchers@d58b70c4a13c4866d96436315da451d8106f8f08 #v1.3.0

      - run: |
          status=0
          while read -r version; do
            echo "::group::$version"
            rustup toolchain install $version
            rustup component add clippy --toolchain $version
            rustup default $version
            (
              cargo custom-clippy
            ) || status=1
            echo "::endgroup::"
          done <<< $(jq -r '.[]' <<< "$TOOLCHAINS")
          exit $status

  ipfs-integration-test:
    name: IPFS Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable

      - uses: r7kamura/rust-problem-matchers@d58b70c4a13c4866d96436315da451d8106f8f08 #v1.3.0

      - uses: Swatinem/rust-cache@6fd3edff6979b79f87531400ad694fb7f2c84b1f # v2.2.1
        with:
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Run ipfs-kad example
        run: cd ./examples/ipfs-kad/ && RUST_LOG=libp2p_swarm=debug,libp2p_kad=trace,libp2p_tcp=debug cargo run
